Перем КонтекстЯдра;
Перем Ожидаем;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.НачатьГруппу("Проверка методов помощников");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЗапускИОстановкуМенеджераЗаданий");
	НаборТестов.Добавить("ТестДолжен_ПоставитьЗаданиеВОчередьБезСтартаИсполнителей");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоПараметрыЗаданияМогутБытьТолькоСтруктурой");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоПриДобавленииЗаданияВПараметрыЗаданияДобавляетсяСвойство_КлючЗадания");
	НаборТестов.Добавить("ТестДолжен_ПолучитьКоличесвоЗаданийВОчереди");
	НаборТестов.Добавить("ТестДолжен_СократитьИсториюВыполненияЗаданий");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСозданиеИПолучениеНастройкиДляМетодаОбработчика");
	НаборТестов.Добавить("ТестДолжен_СохранитьНастройкиМетодаОбработчика_ПереданаТолькоЧастьНастроек");
	
	НаборТестов.НачатьГруппу("Менеджер заданий");
	НаборТестов.Добавить("ТестДолжен_ЗапуститьМенеджераЗаданийКоторыйВключитОдногоИсполнителя");
	НаборТестов.Добавить("ТестДолжен_ОсвободитьАктивноеЗаданиеЕслиИсполнительПересталБытьАктивным");
	НаборТестов.Добавить("ТестДолжен_ОсвободитьНесколькоУпавшихЗаданий");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоСначалаВыполняютсяЗаданияСМинимальнымКоличествомПопытокИМинимальнымПериодомДобавления");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоЗаданияСМаксимальнымПриоритетомВсегдаНаходятсяНаверхуОчереди");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоМенеждерЗаданийАвтоматическиСокращаетИсториюВыполненияЗаданийИспользуяНастройку_ГлубинаХраненияИстории");
	
	НаборТестов.НачатьГруппу("Выполнение заданий");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСтандартныйПереходЗаданияПоСтатусам");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоВРаботуБерутсяТолькоЗаданияСПустымИсполнителемИВСостоянииОжидает");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоУВзятогоВРаботуЗаданияСтавитсяОтметкаВремени_НачалоВыполнения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоУВыполненногоЗаданияСтавитсяОтметкаВремени_ЗавершениеВыполнения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоПриКаждомВзятииВРаботуЗаданияУвеличиваетсяСчетчик_КоличествоПопытокВыполения");
	НаборТестов.Добавить("ТестДолжен_ОтменитьКонкретноеЗаданиеВОчереди");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоВзятоеВРаботуИлиВыполненноеЗаданиеНеОтменяется");
	НаборТестов.Добавить("ТестДолжен_ОтменитьВсеЗаданияВОчереди");
	НаборТестов.Добавить("ТестДолжен_ЗапуститьЗаданиеВнеОчереди");
	НаборТестов.Добавить("ТестДолжен_ДождатьсяВыполненияНесколькихЗаданий");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоОжиданиеВыполненияНесколькихЗаданийИмеетОбщийТаймаут");
	НаборТестов.Добавить("ТестДолжен_ВзятьВРаботуЗаданиеВСтатусеОжидаетВыделенногоИсполнителяЕслиВремяЖизниЗаданияМинутаИБольше");
	
	НаборТестов.НачатьГруппу("Настройки повторного выполнения упавших тестов");
	НаборТестов.Добавить("ТестДолжен_ПолучитьКоличествоЗаданийНаПаузе");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоМенеджер_Отменяет_ЗаданияВОжидании_УКоторыхДостигнутЛимитПоМаксимальномуКоличествуПопытокВыполнения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоМенеджер_Отменяет_ЗаданияНаПаузе_УКоторыхДостигнутЛимитПоМаксимальномуКоличествуПопытокВыполнения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧто_ОтменаВсехЗаданийВОчереди_Отменяет_ЗаданияНаПаузе");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСтатусныеПереходыПадающихЗаданий_СНастроеннойПаузой");
	
	НаборТестов.НачатьГруппу("Ограничение на количество исполнителей по методам-обработчикам");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуОграниченияНаМаксимальноеКоличествоИсполнителей_ВОчередиЕстьТолькоЗаданияОдногоВида");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуОграниченияНаМаксимальноеКоличествоИсполнителей_ВОчередиЕстьЗаданияНесколькихВидов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоОграниченияНаМаксимальноеКоличествоИсполнителей_УчитываютЗаданияВРаботе");
	НаборТестов.Добавить("ТестДолжен_ОтменитьВсеЗаданияВОчереди_КогдаЕстьОграниченияНаМаксимальноеКоличествоИсполнителей");
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(10);
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	мзЗадания.ОстановитьМенеджераЗаданий();
	мзЗадания.ОстановитьАктивныхИсполнителей();
	
	ХранилищеОбщихНастроек.Удалить(Тестирование.ПолучитьКлючОбъектаВХранилищеОбщихНастроек(), Неопределено, Неопределено);
	
	НаборЗаписей_Задания = РегистрыСведений.мзЗадания.СоздатьНаборЗаписей();
	НаборЗаписей_Задания.Записать();
	
	НаборЗаписей_Настройки = РегистрыСведений.мзНастройкиМетодовОбработчиков.СоздатьНаборЗаписей();
	НаборЗаписей_Настройки.Записать();
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.УстановитьГлубинуХраненияИстории(мзЗадания.ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории().Бесконечная);
КонецПроцедуры

// { Проверка методов помощников
Процедура ТестДолжен_ПроверитьЗапускИОстановкуМенеджераЗаданий() Экспорт
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.мзМенеджерЗаданий);
	АктивныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Ожидаем.Что(АктивныеРегламентныеЗадания.Количество()).Равно(0);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	АктивныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Ожидаем.Что(АктивныеРегламентныеЗадания.Количество()).Равно(1);
	
	мзЗадания.ОстановитьМенеджераЗаданий();
	АктивныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Ожидаем.Что(АктивныеРегламентныеЗадания.Количество()).Равно(0);
КонецПроцедуры

Процедура ТестДолжен_ПоставитьЗаданиеВОчередьБезСтартаИсполнителей() Экспорт
	ПараметрыЗадания = Новый Структура("ПриветМир", "!!!");
	мзЗадания.ДобавитьЗадание("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек", ПараметрыЗадания);
	
	КоличествоЗаданийВОчереди = мзЗадания.ПолучитьКоличесвоЗаданийВОчереди();
	Ожидаем.Что(КоличествоЗаданийВОчереди).Равно(1);
	
	мзЗадания.ДобавитьЗадание("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек", ПараметрыЗадания);
	мзЗадания.ДобавитьЗадание("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек", ПараметрыЗадания);
	
	КоличествоЗаданийВОчереди = мзЗадания.ПолучитьКоличесвоЗаданийВОчереди();
	Ожидаем.Что(КоличествоЗаданийВОчереди).Равно(3);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПараметрыЗаданияМогутБытьТолькоСтруктурой() Экспорт
	ВозможныеИсключения = мзЗадания.ПолучитьВозможныеИсключения();
	Параметры = Новый Массив;
	Параметры.Добавить("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек");
	Параметры.Добавить(100);
	Ожидаем.Что(мзЗадания).Метод("ДобавитьЗадание", Параметры).ВыбрасываетИсключение(ВозможныеИсключения.ПараметрыЗаданияДолжныБытьСтруктурой);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПриДобавленииЗаданияВПараметрыЗаданияДобавляетсяСвойство_КлючЗадания() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	
	ПрочитанныеПараметрыЗадания = Задание.Параметры.Получить();
	ПрочитанныйКлючЗадания = Неопределено;
	
	Ожидаем.Что(ПрочитанныеПараметрыЗадания.Свойство("КлючЗадания", ПрочитанныйКлючЗадания), "У параметров не найдено свойство КлючЗадания").ЭтоИстина();
	Ожидаем.Что(ПрочитанныйКлючЗадания, "КлючЗадания = ПрочитанныйКлючЗадания").Равно(КлючЗадания);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьКоличесвоЗаданийВОчереди() Экспорт
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "Ожидали КоличесвоЗаданийВОчереди = 0").Равно(0);
	
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя));
	КлючЗадания3 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	КлючЗадания4 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	КлючЗадания5 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "Ожидали КоличесвоЗаданийВОчереди = 5").Равно(5);
	
	мзЗадания.ОтменитьЗадание(КлючЗадания1);
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "Ожидали КоличесвоЗаданийВОчереди = 4").Равно(4);
	
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.Выполнено));
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "Ожидали КоличесвоЗаданийВОчереди = 3").Равно(3);
	
	МодифицироватьЗадание(КлючЗадания3, Новый Структура("КлючИсполнителя", Новый УникальныйИдентификатор));
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "ПолучитьКоличесвоЗаданийВОчереди теперь реагирует только на статусы").Равно(3);
	
	мзЗадания.ОтменитьВсеЗаданияВОчереди();
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "Ожидали КоличесвоЗаданийВОчереди = 0").Равно(0);
КонецПроцедуры

Процедура ТестДолжен_СократитьИсториюВыполненияЗаданий() Экспорт
	ПредопределенныеЗначенияГлубиныХраненияИстории = мзЗадания.ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории();
	
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	ДваМесяцаНазад = ДобавитьМесяц(ТекущаяДата(), -2);
	МодифицироватьЗадание(КлючЗадания1, Новый Структура("Период, Состояние", ДваМесяцаНазад, Перечисления.мзСостоянияЗаданий.Выполнено));
	
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	ВосемьДнейНазад = ТекущаяДата() - мзЗадания.ПолучитьОдинДень() * 8;
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Период, Состояние", ВосемьДнейНазад, Перечисления.мзСостоянияЗаданий.Отменено));
	
	КлючЗадания3 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	НачалоПрошлогоДня = НачалоДня(ТекущаяДата() - мзЗадания.ПолучитьОдинДень());
	МодифицироватьЗадание(КлючЗадания3, Новый Структура("Период, Состояние", НачалоПрошлогоДня, Перечисления.мзСостоянияЗаданий.Выполнено));
	
	КлючЗадания4 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючЗадания4, Новый Структура("Период", ДваМесяцаНазад));
	
	КлючЗадания5 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючЗадания5, Новый Структура("Период, Состояние", НачалоПрошлогоДня, Перечисления.мзСостоянияЗаданий.Выполняется));
	
	ВсеЗаписи = РегистрыСведений.мзЗадания.СоздатьНаборЗаписей();
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре до сокращения").Равно(5);
	
	мзЗадания.СократитьИсториюВыполненияЗаданий(ПредопределенныеЗначенияГлубиныХраненияИстории.Месяц);
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре после сокращения до 1 месяца. Задания в состоянии Ожидает не сокращаются").Равно(4);
	
	мзЗадания.СократитьИсториюВыполненияЗаданий(ПредопределенныеЗначенияГлубиныХраненияИстории.Неделя);
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре после сокращения до недели").Равно(3);
	
	мзЗадания.СократитьИсториюВыполненияЗаданий(ПредопределенныеЗначенияГлубиныХраненияИстории.День);
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре после сокращения до дня. Задания в состоянии Выполняется не сокращаются").Равно(2);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСозданиеИПолучениеНастройкиДляМетодаОбработчика() Экспорт
	ИмяМетода = "НекийМетодОбработчик";
	ТекущиеНастройки = мзЗадания.ПолучитьНастройкиМетодаОбработчика(ИмяМетода);
	
	Ожидаем.Что(ТекущиеНастройки.МаксимальноеКоличествоПопытокВыполнения, "ТекущиеНастройки.МаксимальноеКоличествоПопытокВыполнения").Равно(0);
	Ожидаем.Что(ТекущиеНастройки.ПаузаПередНовойПопыткой, "ТекущиеНастройки.ПаузаПередНовойПопыткой").Равно(0);
	Ожидаем.Что(ТекущиеНастройки.МаксимальноеКоличествоИсполнителей, "ТекущиеНастройки.МаксимальноеКоличествоИсполнителей").Равно(0);
	Ожидаем.Что(ТекущиеНастройки.Приоритет, "ТекущиеНастройки.Приоритет").Равно(0);
	
	СохраняемыеНастройки = Новый Структура("МаксимальноеКоличествоПопытокВыполнения, ПаузаПередНовойПопыткой, МаксимальноеКоличествоИсполнителей, Приоритет", 5, 600, 7, 3);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетода, СохраняемыеНастройки);
	
	НовыеНастройки = мзЗадания.ПолучитьНастройкиМетодаОбработчика(ИмяМетода);
	
	Для каждого ЭлементКоллекции Из СохраняемыеНастройки Цикл
		Ожидаем.Что(НовыеНастройки[ЭлементКоллекции.Ключ], "НовыеНастройки." + ЭлементКоллекции.Ключ).Равно(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	СохраняемыеНастройки2 = Новый Структура("МаксимальноеКоличествоПопытокВыполнения, ПаузаПередНовойПопыткой, МаксимальноеКоличествоИсполнителей, Приоритет", 10, 1200, 15, 9);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетода, СохраняемыеНастройки2);
	
	НовыеНастройки2 = мзЗадания.ПолучитьНастройкиМетодаОбработчика(ИмяМетода);
	
	Для каждого ЭлементКоллекции Из СохраняемыеНастройки2 Цикл
		Ожидаем.Что(НовыеНастройки2[ЭлементКоллекции.Ключ], "НовыеНастройки2." + ЭлементКоллекции.Ключ).Равно(ЭлементКоллекции.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура ТестДолжен_СохранитьНастройкиМетодаОбработчика_ПереданаТолькоЧастьНастроек() Экспорт
	ИмяМетода = "НекийМетодОбработчик";
	СохраняемыеНастройки = Новый Структура("МаксимальноеКоличествоПопытокВыполнения, ПаузаПередНовойПопыткой, МаксимальноеКоличествоИсполнителей, Приоритет", 5, 600, 7, 3);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетода, СохраняемыеНастройки);
	
	СохраняемыеНастройки2 = Новый Структура("ПаузаПередНовойПопыткой, Приоритет", 1200, 9);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетода, СохраняемыеНастройки2);
	
	СчитанныеНастройки = мзЗадания.ПолучитьНастройкиМетодаОбработчика(ИмяМетода);
	
	Ожидаем.Что(СчитанныеНастройки.МаксимальноеКоличествоПопытокВыполнения, "МаксимальноеКоличествоПопытокВыполнения").Равно(СохраняемыеНастройки.МаксимальноеКоличествоПопытокВыполнения);
	Ожидаем.Что(СчитанныеНастройки.ПаузаПередНовойПопыткой, "ПаузаПередНовойПопыткой").Равно(СохраняемыеНастройки2.ПаузаПередНовойПопыткой);
	Ожидаем.Что(СчитанныеНастройки.МаксимальноеКоличествоИсполнителей, "МаксимальноеКоличествоИсполнителей").Равно(СохраняемыеНастройки.МаксимальноеКоличествоИсполнителей);
	Ожидаем.Что(СчитанныеНастройки.Приоритет, "Приоритет").Равно(СохраняемыеНастройки2.Приоритет);
КонецПроцедуры
// } Проверка методов помощников

// { Менеджер заданий
Процедура ТестДолжен_ЗапуститьМенеджераЗаданийКоторыйВключитОдногоИсполнителя() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	КлючИсполнителя = Тестирование.ПолучитьКлючИсполнителя(КлючЗадания);
	Фоновое = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИсполнителя);
	Ожидаем.Что(Фоновое.Состояние).Равно(СостояниеФоновогоЗадания.Активно);
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Задание должно было стать <Выполнено>").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ОсвободитьАктивноеЗаданиеЕслиИсполнительПересталБытьАктивным() Экспорт
	ПараметрыЗадания = Новый Структура();
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	КлючИсполнителя = Тестирование.ПолучитьКлючИсполнителя(КлючЗадания);
	Исполнитель = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИсполнителя);
	Ожидаем.Что(Исполнитель.Состояние, "Ожидаем, что исполнитель завершился аварийно").Равно(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Состояние задания должно стать <Выполняется>").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Ожидает), "Задание должно было стать <Ожидает>").ЭтоИстина();
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(1);
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	КлючНовогоИсполнителя = Тестирование.ПолучитьКлючИсполнителя(КлючЗадания);
	Ожидаем.Что(КлючНовогоИсполнителя, "Ожидали, что на задание будет назначен новый исполнитель").ЭтоНе().Равно(КлючИсполнителя);
КонецПроцедуры

Процедура ТестДолжен_ОсвободитьНесколькоУпавшихЗаданий() Экспорт
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", Новый Структура);
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", Новый Структура);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания1, Перечисления.мзСостоянияЗаданий.Выполняется), "Задание1 должно было стать <Выполняется>").ЭтоИстина();
	КлючИсполнителя1 = Тестирование.ПолучитьКлючИсполнителя(КлючЗадания1);
	Исполнитель1 = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИсполнителя1);
	Ожидаем.Что(Исполнитель1.Состояние, "Ожидаем, что Исполнитель1 завершился аварийно").Равно(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания2, Перечисления.мзСостоянияЗаданий.Выполняется), "Задание2 должно было стать <Выполняется>").ЭтоИстина();
	КлючИсполнителя2 = Тестирование.ПолучитьКлючИсполнителя(КлючЗадания2);
	Исполнитель2 = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИсполнителя2);
	Ожидаем.Что(Исполнитель2.Состояние, "Ожидаем, что Исполнитель2 завершился аварийно").Равно(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания1, Перечисления.мзСостоянияЗаданий.Ожидает), "Задание1 должно было стать <Ожидает>").ЭтоИстина();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания2, Перечисления.мзСостоянияЗаданий.Ожидает), "Задание2 должно было стать <Ожидает>").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСначалаВыполняютсяЗаданияСМинимальнымКоличествомПопытокИМинимальнымПериодомДобавления() Экспорт
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(1);
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", Новый Структура);
	
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", Новый Структура("Секунды", 1));
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Период", ТекущаяДата() + 1));
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания1, Перечисления.мзСостоянияЗаданий.Выполняется), "Задание1 должно было стать <Выполняется>").ЭтоИстина();
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания2, Перечисления.мзСостоянияЗаданий.Выполняется), "Задание2 должно было стать <Выполняется>").ЭтоИстина();
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания1), "Задание1 должно быть <Ожидает>").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания2, Перечисления.мзСостоянияЗаданий.Выполнено), "Задание2 должно было стать <Выполнено>").ЭтоИстина();
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания1, Перечисления.мзСостоянияЗаданий.Выполняется), "Задание1 должно было стать <Выполняется> (2)").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоЗаданияСМаксимальнымПриоритетомВсегдаНаходятсяНаверхуОчереди() Экспорт
	ИмяПриоритетногоМетодаОбработчика = "Тестирование.ПадающееЗадание";
	НастройкиОбработчика = Новый Структура("Приоритет", 5);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяПриоритетногоМетодаОбработчика, НастройкиОбработчика);
	
	КлючПриоритетногоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", Новый Структура);
	МодифицироватьЗадание(КлючПриоритетногоЗадания, Новый Структура("Период", ТекущаяДата() + 10));
	КлючОбычногоЗадания1 = мзЗадания.ДобавитьЗадание("БитыйМетодОбработчик", Новый Структура);
	КлючОбычногоЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек", Новый Структура("КлючНастроек", "ЭтуНастройкуНиктоНеСчитывает"));
	МодифицироватьЗадание(КлючОбычногоЗадания2, Новый Структура("Период", ТекущаяДата() + 1));
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(1);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючПриоритетногоЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Приоритетное задание в работе (1)").ЭтоИстина();
	ПриоритетноеЗадание = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючПриоритетногоЗадания)[0];
	Ожидаем.Что(ПриоритетноеЗадание.КоличествоПопытокВыполения, "Приоритетное задание кол-во попыток (1)").Равно(1);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания1), "Состояние КлючОбычногоЗадания1 (1)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания2), "Состояние КлючОбычногоЗадания2 (1)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючПриоритетногоЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Приоритетное задание в работе (2)").ЭтоИстина();
	ПриоритетноеЗадание = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючПриоритетногоЗадания)[0];
	Ожидаем.Что(ПриоритетноеЗадание.КоличествоПопытокВыполения, "Приоритетное задание кол-во попыток (2)").Равно(2);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания1), "Состояние КлючОбычногоЗадания1 (2)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания2), "Состояние КлючОбычногоЗадания2 (2)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(2);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючПриоритетногоЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Приоритетное задание в работе (3)").ЭтоИстина();
	ПриоритетноеЗадание = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючПриоритетногоЗадания)[0];
	Ожидаем.Что(ПриоритетноеЗадание.КоличествоПопытокВыполения, "Приоритетное задание кол-во попыток (3)").Равно(3);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания1), "Состояние КлючОбычногоЗадания1 (3)").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания2), "Состояние КлючОбычногоЗадания2 (3)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючПриоритетногоЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Приоритетное задание в работе (4)").ЭтоИстина();
	ПриоритетноеЗадание = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючПриоритетногоЗадания)[0];
	Ожидаем.Что(ПриоритетноеЗадание.КоличествоПопытокВыполения, "Приоритетное задание кол-во попыток (4)").Равно(4);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания1), "Состояние КлючОбычногоЗадания1 (4)").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОбычногоЗадания2), "Состояние КлючОбычногоЗадания2 (4)").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоМенеждерЗаданийАвтоматическиСокращаетИсториюВыполненияЗаданийИспользуяНастройку_ГлубинаХраненияИстории() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	ДваМесяцаНазад = ДобавитьМесяц(ТекущаяДата(), -2);
	МодифицироватьЗадание(КлючЗадания1, Новый Структура("Период, Состояние", ДваМесяцаНазад, Перечисления.мзСостоянияЗаданий.Выполнено));
	
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	ВосемьДнейНазад = ТекущаяДата() - мзЗадания.ПолучитьОдинДень() * 8;
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Период, Состояние", ВосемьДнейНазад, Перечисления.мзСостоянияЗаданий.Отменено));
	
	ВсеЗаписи = РегистрыСведений.мзЗадания.СоздатьНаборЗаписей();
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре до сокращения до месяца").Равно(2);
	
	ПредопределенныеЗначенияГлубиныХраненияИстории = мзЗадания.ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории();
	мзЗадания.УстановитьГлубинуХраненияИстории(ПредопределенныеЗначенияГлубиныХраненияИстории.Месяц);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре после сокращения до 1 месяца").Равно(1);
	
	мзЗадания.УстановитьГлубинуХраненияИстории(ПредопределенныеЗначенияГлубиныХраненияИстории.Неделя);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	ВсеЗаписи.Прочитать();
	Ожидаем.Что(ВсеЗаписи.Количество(), "Количество записей в регистре после сокращения до недели").Равно(0);
КонецПроцедуры
// } Менеджер заданий

// { Выполнение заданий
Процедура ТестДолжен_ПроверитьСтандартныйПереходЗаданияПоСтатусам() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <Ожидает>").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ОжидатьИзмененияСостояния(КлючЗадания, СостояниеЗадания), "Состояние осталось не измененным: " + СостояниеЗадания).ЭтоИстина();
	
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <Выполняется>").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	
	Ожидаем.Что(мзЗадания.ОжидатьИзмененияСостояния(КлючЗадания, СостояниеЗадания), "Состояние осталось не измененным: " + СостояниеЗадания).ЭтоИстина();
	
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <Выполнено>").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоВРаботуБерутсяТолькоЗаданияСПустымИсполнителемИВСостоянииОжидает() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	
	КлючВыполненногоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючВыполненногоЗадания, Новый Структура("Состояние, КлючИсполнителя", Перечисления.мзСостоянияЗаданий.Выполнено, Новый УникальныйИдентификатор));
	
	КлючВыполненногоЗаданияБезЗаполненногоИсполнителя = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючВыполненногоЗаданияБезЗаполненногоИсполнителя, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.Выполнено));
	
	КлючОтмененногоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	мзЗадания.ОтменитьЗадание(КлючОтмененногоЗадания);
	
	КлючОбычногоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючОбычногоЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Ожидали состояние <Выполняется>").ЭтоИстина();
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоАктивныхИсполнителей(), "Должен быть всего 1 активный исполнитель").Равно(1);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючВыполненногоЗадания), "Выполненное задание должно иметь состояние <Выполнено>").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючВыполненногоЗаданияБезЗаполненногоИсполнителя), "Выполненное задание без заполненного исполнителя должно иметь состояние <Выполнено>").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючОтмененногоЗадания), "Отмененное задание должно иметь состояние <Отменено>").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючОбычногоЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Ожидали состояние <Выполнено>").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоУВзятогоВРаботуЗаданияСтавитсяОтметкаВремени_НачалоВыполнения() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	ДоЗапускаМенеджера = ТекущаяДата();
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Не дождались состояния <Выполняется>").ЭтоИстина();
	
	ПослеВзятияВРаботу = ТекущаяДата();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	
	Ожидаем.Что(Задание.НачалоВыполнения, "НачалоВыполнения должно быть >= времени до запуска менеджера").БольшеИлиРавно(ДоЗапускаМенеджера);
	Ожидаем.Что(Задание.НачалоВыполнения, "НачалоВыполнения должно быть <= времени после взятия в работу").МеньшеИлиРавно(ПослеВзятияВРаботу);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоУВыполненногоЗаданияСтавитсяОтметкаВремени_ЗавершениеВыполнения() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Не дождались состояния <Выполнено>").ЭтоИстина();
	
	ПослеВыполненияЗадания = ТекущаяДата();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	
	Ожидаем.Что(Задание.ЗавершениеВыполнения, "ЗавершениеВыполнения должно быть >= НачалоВыполнения").БольшеИлиРавно(Задание.НачалоВыполнения);
	Ожидаем.Что(Задание.ЗавершениеВыполнения, "ЗавершениеВыполнения должно быть <= времени после выполнения задания").МеньшеИлиРавно(ПослеВыполненияЗадания);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПриКаждомВзятииВРаботуЗаданияУвеличиваетсяСчетчик_КоличествоПопытокВыполения() Экспорт
	ПараметрыЗадания = Новый Структура();
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.ПадающееЗадание", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Не дождались состояния <Выполняется>").ЭтоИстина();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	
	Ожидаем.Что(Задание.КоличествоПопытокВыполения, "КоличествоПопытокВыполения должно быть равно 1").Равно(1);
	
	мзЗадания.МенеджерЗаданий_Выполнение(); // Синхронный вызов, чтобы задание гарантированно получило состояние Ожидает к моменту последующих проверок
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Не дождались состояния <Выполняется>").ЭтоИстина();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	
	Ожидаем.Что(Задание.КоличествоПопытокВыполения, "КоличествоПопытокВыполения должно быть равно 2").Равно(2);
КонецПроцедуры

Процедура ТестДолжен_ОтменитьКонкретноеЗаданиеВОчереди() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	ВремяДоОтмены = ТекущаяДата();
	
	Ожидаем.Что(мзЗадания.ОтменитьЗадание(КлючЗадания), "Ожидается, что метод ОтменитьЗадание возвращает флаг успешности отмены").ЭтоИстина();
	
	ВремяПослеОтмены = ТекущаяДата();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = НаборЗаписей[0];
	Ожидаем.Что(Задание.Состояние, "Задание должно быть в статусе <Отменено>").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
	Ожидаем.Что(Задание.ЗавершениеВыполнения, "При отмене должно заполняться поле ЗавершениеВыполнения").Заполнено();
	Ожидаем.Что(Задание.ЗавершениеВыполнения, "ЗавершениеВыполнения >= ВремяДоОтмены").БольшеИлиРавно(ВремяДоОтмены);
	Ожидаем.Что(Задание.ЗавершениеВыполнения, "ЗавершениеВыполнения <= ВремяПослеОтмены").МеньшеИлиРавно(ВремяДоОтмены);
	
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя));
	
	Ожидаем.Что(мзЗадания.ОтменитьЗадание(КлючЗадания2), "Задания в состоянии ОжидаетВыделенногоИсполнителя так же могут отменяться").ЭтоИстина();
	
	КлючЗадания3 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.НаПаузе));
	
	Ожидаем.Что(мзЗадания.ОтменитьЗадание(КлючЗадания3), "Задания в состоянии НаПаузе так же могут отменяться").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоВзятоеВРаботуИлиВыполненноеЗаданиеНеОтменяется() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Не дождались состояния <Выполняется>").ЭтоИстина();
	Ожидаем.Что(мзЗадания.ОтменитьЗадание(КлючЗадания), "Нельзя отменить задание находящееся в работе").ЭтоЛожь();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Не дождались состояния <Выполнено>").ЭтоИстина();
	Ожидаем.Что(мзЗадания.ОтменитьЗадание(КлючЗадания), "Нельзя отменить выполненное задание").ЭтоЛожь();
КонецПроцедуры

Процедура ТестДолжен_ОтменитьВсеЗаданияВОчереди() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючВыполняемогоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючВыполняемогоЗадания, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.Выполняется));
	
	КлючВыполненногоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	МодифицироватьЗадание(КлючВыполненногоЗадания, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.Выполнено));
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	КлючЗадания2 = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	мзЗадания.ОтменитьВсеЗаданияВОчереди();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючВыполняемогоЗадания), "Выполняемое задание не должно отменяться").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючВыполненногоЗадания), "Выполненное задание не должно отменяться").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания1), "Задание1 должно было отмениться").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания2), "Задание2 должно было отмениться").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
КонецПроцедуры

Процедура ТестДолжен_ЗапуститьЗаданиеВнеОчереди() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючЗадания = мзЗадания.ДобавитьЗаданиеВнеОчереди("Тестирование.Уснуть", ПараметрыЗадания);
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <ОжидаетВыделенногоИсполнителя>").Равно(Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя);
	
	Ожидаем.Что(мзЗадания.ОжидатьИзмененияСостояния(КлючЗадания, СостояниеЗадания), "Состояние осталось не измененным: " + СостояниеЗадания).ЭтоИстина();
	
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <Выполняется>").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	
	Ожидаем.Что(мзЗадания.ОжидатьИзмененияСостояния(КлючЗадания, СостояниеЗадания), "Состояние осталось не измененным: " + СостояниеЗадания).ЭтоИстина();
	
	СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания);
	Ожидаем.Что(СостояниеЗадания, "Должно быть состояние <Выполнено>").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
КонецПроцедуры

Процедура ТестДолжен_ДождатьсяВыполненияНесколькихЗаданий() Экспорт
	Задания = Новый Массив;
	КлючиЗаданий = Новый Массив;
	Для Сч = 1 По 5 Цикл
		ПараметрыЗадания = Новый Структура("КлючНастроек, НомерФонового", "ТестДолжен_ВыполнитьЗаданияВКонкурентномРежиме" + Сч, Сч);
		КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек", ПараметрыЗадания);
		Задания.Добавить(Новый Структура("КлючЗадания, ПараметрыЗадания", КлючЗадания, ПараметрыЗадания));
		КлючиЗаданий.Добавить(КлючЗадания);
	КонецЦикла;
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ДождатьсяВыполнения(КлючиЗаданий, 5), "Не дождались выполнения всех заданий за 5 сек").ЭтоИстина();
	
	Для каждого ЭлементКоллекции Из Задания Цикл
		КлючОбъекта = Тестирование.ПолучитьКлючОбъектаВХранилищеОбщихНастроек();
		СчитанныеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, ЭлементКоллекции.ПараметрыЗадания.КлючНастроек);
		Ожидаем.Что(СчитанныеНастройки, "Настройки из ХранилищеОбщихНастроек").Заполнено();
		Ожидаем.Что(СчитанныеНастройки.Свойство("НомерФонового")).ЭтоИстина();
		Ожидаем.Что(СчитанныеНастройки.НомерФонового).Равно(ЭлементКоллекции.ПараметрыЗадания.НомерФонового);
	КонецЦикла;
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоОжиданиеВыполненияНесколькихЗаданийИмеетОбщийТаймаут() Экспорт
	КлючиЗаданий = Новый Массив;
	Для Сч = 1 По 3 Цикл
		ПараметрыЗадания = Новый Структура("Секунды", Сч);
		КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
		КлючиЗаданий.Добавить(КлючЗадания);
	КонецЦикла;
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ДождатьсяВыполнения(КлючиЗаданий, Сч + 1), "Успешное ожидание завершения всех заданий").ЭтоИстина();
	мзЗадания.ОстановитьМенеджераЗаданий();
	
	КлючиЗаданий = Новый Массив;
	Для Сч = 1 По 3 Цикл
		ПараметрыЗадания = Новый Структура("Секунды", Сч);
		КлючЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
		КлючиЗаданий.Добавить(КлючЗадания);
	КонецЦикла;
	
	мзЗадания.ЗапуститьМенеджераЗаданий();
	Ожидаем.Что(мзЗадания.ДождатьсяВыполнения(КлючиЗаданий, Сч - 1), "Провальное ожидание завершения всех заданий").ЭтоЛожь();
	
	мзЗадания.ДождатьсяВыполнения(КлючиЗаданий, Сч);
КонецПроцедуры

Процедура ТестДолжен_ВзятьВРаботуЗаданиеВСтатусеОжидаетВыделенногоИсполнителяЕслиВремяЖизниЗаданияМинутаИБольше() Экспорт
	ПараметрыЗадания = Новый Структура("Секунды", 1);
	КлючВыполняемогоЗадания = мзЗадания.ДобавитьЗадание("Тестирование.Уснуть", ПараметрыЗадания);
	
	МодифицироватьЗадание(КлючВыполняемогоЗадания, Новый Структура("Состояние", Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя));
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	СостояниеИзменилось = мзЗадания.ОжидатьИзмененияСостояния(КлючВыполняемогоЗадания, Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя, 1);
	
	Ожидаем.Что(СостояниеИзменилось, "Ожидали, что состояние останется прежним. Время жизни задания меньше минуты").ЭтоЛожь();
	
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючВыполняемогоЗадания);
	НаборЗаписей[0].Период = НаборЗаписей[0].Период - 60;
	НаборЗаписей.Записать();
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	СостояниеИзменилось = мзЗадания.ОжидатьИзмененияСостояния(КлючВыполняемогоЗадания, Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя, 1);
	
	Ожидаем.Что(СостояниеИзменилось, "Ожидали, что состояние изменится. Время жизни задания равно минуте").ЭтоИстина();
	
	ТекущееСостояние = мзЗадания.ПолучитьСостояниеЗадания(КлючВыполняемогоЗадания);
	Ожидаем.Что(ТекущееСостояние).Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
КонецПроцедуры
// } Выполнение заданий

// { Настройки повторного выполнения упавших тестов
Процедура ТестДолжен_ПолучитьКоличествоЗаданийНаПаузе() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПадающееЗадание";
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	КлючЗадания2 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	КлючЗадания3 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	КлючЗадания4 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе = 0").Равно(0);
	
	МодифицироватьЗадание(КлючЗадания1, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе = 1").Равно(1);
	
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	МодифицироватьЗадание(КлючЗадания3, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе = 3").Равно(3);
	
	мзЗадания.ОтменитьЗадание(КлючЗадания1);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе = 2").Равно(2);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоМенеджер_Отменяет_ЗаданияВОжидании_УКоторыхДостигнутЛимитПоМаксимальномуКоличествуПопытокВыполнения() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПадающееЗадание";
	НастройкиМетода = Новый Структура("МаксимальноеКоличествоПопытокВыполнения", 5);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиМетода);
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	МодифицироватьЗадание(КлючЗадания1, Новый Структура("КоличествоПопытокВыполения", НастройкиМетода.МаксимальноеКоличествоПопытокВыполнения));
	КлючЗадания2 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания1), "Состояние задания 1 до запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания2), "Состояние задания 2 до запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания1), "Состояние задания 1 после запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания2), "Состояние задания 2 после запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоМенеджер_Отменяет_ЗаданияНаПаузе_УКоторыхДостигнутЛимитПоМаксимальномуКоличествуПопытокВыполнения() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПадающееЗадание";
	НастройкиМетода = Новый Структура("МаксимальноеКоличествоПопытокВыполнения", 5);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиМетода);
	
	КлючЗадания = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	МодифицироватьЗадание(КлючЗадания, Новый Структура("КоличествоПопытокВыполения, Состояние", НастройкиМетода.МаксимальноеКоличествоПопытокВыполнения, Перечисления.мзСостоянияЗаданий.НаПаузе));
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "Состояние задания до запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.НаПаузе);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "Состояние задания после запуска менеджера").Равно(Перечисления.мзСостоянияЗаданий.Отменено);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧто_ОтменаВсехЗаданийВОчереди_Отменяет_ЗаданияНаПаузе() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПадающееЗадание";
	
	КлючЗадания1 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	МодифицироватьЗадание(КлючЗадания1, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	КлючЗадания2 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	МодифицироватьЗадание(КлючЗадания2, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	КлючЗадания3 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	МодифицироватьЗадание(КлючЗадания3, Новый Структура("Состояние, НачалоВыполнения, КоличествоПопытокВыполения", Перечисления.мзСостоянияЗаданий.НаПаузе, ТекущаяДата(), 1));
	КлючЗадания4 = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "ПолучитьКоличесвоЗаданийВОчереди до отмены").Равно(1);
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе до отмены").Равно(3);
	
	мзЗадания.ОтменитьВсеЗаданияВОчереди();
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "ПолучитьКоличесвоЗаданийВОчереди после отмены").Равно(0);
	Ожидаем.Что(мзЗадания.ПолучитьКоличествоЗаданийНаПаузе(), "ПолучитьКоличествоЗаданийНаПаузе после отмены").Равно(0);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСтатусныеПереходыПадающихЗаданий_СНастроеннойПаузой() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПадающееЗадание";
	НастройкиМетода = Новый Структура("ПаузаПередНовойПопыткой", 600);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиМетода);
	
	КлючЗадания = мзЗадания.ДобавитьЗадание(ИмяМетодаОбработчика, Новый Структура);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Ожидание взятия в работу").ЭтоИстина();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "1-ый запуск").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "2-ой запуск").Равно(Перечисления.мзСостоянияЗаданий.НаПаузе);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "3-ой запуск").Равно(Перечисления.мзСостоянияЗаданий.НаПаузе);
	
	МодифицироватьЗадание(КлючЗадания, Новый Структура("НачалоВыполнения", ТекущаяДата() - НастройкиМетода.ПаузаПередНовойПопыткой - 1));
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(0);
	мзЗадания.МенеджерЗаданий_Выполнение();
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(КлючЗадания), "4-ий запуск").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	ДатаВремяДоЗапуска = ТекущаяДата();
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(1);
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполняется), "Ожидание взятия в работу при 5-ом запуске").ЭтоИстина();
	
	Задание = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания)[0];
	Ожидаем.Что(Задание.Состояние).Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	Ожидаем.Что(Задание.НачалоВыполнения).БольшеИлиРавно(ДатаВремяДоЗапуска);
КонецПроцедуры
// } Настройки повторного выполнения упавших тестов

// { Ограничение на количество исполнителей по методам-обработчикам
Процедура ТестДолжен_ПроверитьРаботуОграниченияНаМаксимальноеКоличествоИсполнителей_ВОчередиЕстьТолькоЗаданияОдногоВида() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек";
	ПараметрыОбработчика = Новый Структура("КлючНастроек", "ЭтуНастройкуНиктоНеСчитывает");
	НастройкиОбработчика = Новый Структура("МаксимальноеКоличествоИсполнителей", 3);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиОбработчика);
	
	КоличествоЗаданий = 5;
	СозданныеЗадания = СоздатьЗаданияРасположенныеПоследовательноВоВремени(ИмяМетодаОбработчика, ПараметрыОбработчика, КоличествоЗаданий, ТекущаяДата());
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "КоличесвоЗаданийВОчереди до запуска").Равно(КоличествоЗаданий);
	Ожидаем.Что(мзЗадания.ПолучитьОграничениеНаКоличествоИсполнителей(), "Общее ограничение на количество исполнителей").Равно(10);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	КлючЗадания = СозданныеЗадания[0];
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Выполнение задания завершено").ЭтоИстина();
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "КоличесвоЗаданийВОчереди после запуска").Равно(КоличествоЗаданий - НастройкиОбработчика.МаксимальноеКоличествоИсполнителей);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуОграниченияНаМаксимальноеКоличествоИсполнителей_ВОчередиЕстьЗаданияНесколькихВидов() Экспорт
	ИмяМетодаОбработчика1 = "Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек";
	ПараметрыОбработчика1 = Новый Структура("КлючНастроек", "ЭтуНастройкуНиктоНеСчитывает");
	НастройкиОбработчика1 = Новый Структура("МаксимальноеКоличествоИсполнителей", 3);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика1, НастройкиОбработчика1);
	КоличествоЗаданий_Обработчик1 = 5;
	ТекущаяДата = ТекущаяДата();
	СозданныеЗадания_Обработчик1 = СоздатьЗаданияРасположенныеПоследовательноВоВремени(ИмяМетодаОбработчика1, ПараметрыОбработчика1, КоличествоЗаданий_Обработчик1, ТекущаяДата);
	
	ИмяМетодаОбработчика2 = "Тестирование.ПадающееЗадание";
	ПараметрыОбработчика2 = Новый Структура;
	НастройкиОбработчика2 = Новый Структура("МаксимальноеКоличествоИсполнителей", 4);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика2, НастройкиОбработчика2);
	КоличествоЗаданий_Обработчик2 = 5;
	СозданныеЗадания_Обработчик2 = СоздатьЗаданияРасположенныеПоследовательноВоВремени(ИмяМетодаОбработчика2, ПараметрыОбработчика2, КоличествоЗаданий_Обработчик2, ТекущаяДата + КоличествоЗаданий_Обработчик1);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(5);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	
	КлючЗадания = СозданныеЗадания_Обработчик1[0];
	Ожидаем.Что(мзЗадания.ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.мзСостоянияЗаданий.Выполнено), "Выполнение задания завершено").ЭтоИстина();
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик1[0]), "Задание1_Обработчик1").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик1[1]), "Задание2_Обработчик1").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик1[2]), "Задание3_Обработчик1").Равно(Перечисления.мзСостоянияЗаданий.Выполнено);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик1[3]), "Задание4_Обработчик1").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик1[4]), "Задание5_Обработчик1").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик2[0]), "Задание6_Обработчик2").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик2[1]), "Задание7_Обработчик2").Равно(Перечисления.мзСостоянияЗаданий.Выполняется);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик2[2]), "Задание8_Обработчик2").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик2[3]), "Задание9_Обработчик2").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
	Ожидаем.Что(мзЗадания.ПолучитьСостояниеЗадания(СозданныеЗадания_Обработчик2[4]), "Задание10_Обработчик2").Равно(Перечисления.мзСостоянияЗаданий.Ожидает);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоОграниченияНаМаксимальноеКоличествоИсполнителей_УчитываютЗаданияВРаботе() Экспорт
	ИмяМетодаОбработчика = "Тестирование.Уснуть";
	ПараметрыЗадания = Новый Структура("Секунды", 2);
	НастройкиОбработчика = Новый Структура("МаксимальноеКоличествоИсполнителей", 10);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиОбработчика);
	
	КоличествоЗаданий = 15;
	СозданныеЗадания = СоздатьЗаданияРасположенныеПоследовательноВоВремени(ИмяМетодаОбработчика, ПараметрыЗадания, КоличествоЗаданий, ТекущаяДата());
	КоличествоАктивныхЗаданий = 5;
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(КоличествоАктивныхЗаданий);
	
	мзЗадания.МенеджерЗаданий_Выполнение();
	мзЗадания.ОжидатьСостояниеЗадания(СозданныеЗадания[0], Перечисления.мзСостоянияЗаданий.Выполняется);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "1-ый запуск").Равно(КоличествоЗаданий - КоличествоАктивныхЗаданий);
	
	мзЗадания.УстановитьОграничениеПоКоличествуИсполнителей(КоличествоЗаданий);
	мзЗадания.МенеджерЗаданий_Выполнение();
	мзЗадания.ОжидатьСостояниеЗадания(СозданныеЗадания[КоличествоАктивныхЗаданий], Перечисления.мзСостоянияЗаданий.Выполняется);
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "2-ой запуск").Равно(КоличествоЗаданий - НастройкиОбработчика.МаксимальноеКоличествоИсполнителей);
	
	мзЗадания.ОжидатьСостояниеЗадания(СозданныеЗадания[9], Перечисления.мзСостоянияЗаданий.Выполнено);
КонецПроцедуры

Процедура ТестДолжен_ОтменитьВсеЗаданияВОчереди_КогдаЕстьОграниченияНаМаксимальноеКоличествоИсполнителей() Экспорт
	ИмяМетодаОбработчика = "Тестирование.ПоместитьПараметрыВХранилищеОбщихНастроек";
	ПараметрыЗадания = Новый Структура("КлючНастроек", "ЭтуНастройкуНиктоНеСчитывает");
	НастройкиОбработчика = Новый Структура("МаксимальноеКоличествоИсполнителей", 3);
	мзЗадания.СохранитьНастройкиМетодаОбработчика(ИмяМетодаОбработчика, НастройкиОбработчика);
	
	КоличествоЗаданий = 5;
	СоздатьЗаданияРасположенныеПоследовательноВоВремени(ИмяМетодаОбработчика, ПараметрыЗадания, КоличествоЗаданий, ТекущаяДата());
	
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "До отмены").Равно(КоличествоЗаданий);
	мзЗадания.ОтменитьВсеЗаданияВОчереди();
	Ожидаем.Что(мзЗадания.ПолучитьКоличесвоЗаданийВОчереди(), "После отмены").Равно(0);
КонецПроцедуры
// } Ограничение на количество исполнителей по методам-обработчикам

// { Helpers
Функция ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(Знач КлючЗадания)
	НаборЗаписей = мзЗадания.ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	
	Ожидаем.Что(НаборЗаписей.Количество(), "В наборе записей ожидается 1 запись").Равно(1);
	
	Возврат НаборЗаписей;
КонецФункции

Процедура МодифицироватьЗадание(Знач КлючЗадания, Знач ЗначенияПолей)
	Набор = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Задание = Набор[0];
	ЗаполнитьЗначенияСвойств(Задание, ЗначенияПолей);
	Набор.Записать();
КонецПроцедуры

Функция СоздатьЗаданияРасположенныеПоследовательноВоВремени(Знач ИмяМетода, Знач Параметры, Знач КоличествоЗаданий, Знач ПериодПервогоЗадания)
	СозданныеЗадания = Новый Массив;
	Для Сч = 1 По КоличествоЗаданий Цикл
		КлючЗадания = мзЗадания.ДобавитьЗадание(ИмяМетода, Параметры);
		МодифицироватьЗадание(КлючЗадания, Новый Структура("Период", ПериодПервогоЗадания + Сч));
		СозданныеЗадания.Добавить(КлючЗадания);
	КонецЦикла;
	
	Возврат СозданныеЗадания;
КонецФункции
// }
